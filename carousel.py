import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
GROUP_ID = int(os.getenv("GROUP_IDS")) 
bot = Bot(token=os.getenv('CARSIMG_TOKEN'), parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class PhotoCarouselStates(StatesGroup):
    uploading_photos = State()
    awaiting_caption = State()
    browsing_photos = State()

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å–µ–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_photos = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
class Keyboards:
    @staticmethod
    def control_keyboard():
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å")]],
            resize_keyboard=True
        )

    @staticmethod
    def carousel_keyboard(user_id: int, group_id: int, index: int):
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{user_id}_{group_id}_{index}")
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{user_id}_{group_id}_{index}")
        return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()
    user_photos[message.from_user.id] = []

    await message.answer("–ü—Ä–∏–≤–µ—Ç ‚úã –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ‚è¨")
    await message.answer("1. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –ø–æ 1—à—Ç –Ω–µ –±–æ–ª–µ–µ 10, –Ω–µ –∑–∞–±—É–¥—å —Å–∂–∞—Ç—å –∏—Ö.")
    await message.answer("2. –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. \n‚ö† –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ü–æ–¥–ø–∏—Å—å.")
    await message.answer("–í–ø–µ—Ä–µ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ üìé ")
    await state.set_state(PhotoCarouselStates.uploading_photos)

@router.message(PhotoCarouselStates.uploading_photos, F.photo)
async def photo_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
    user_photos[user_id].append({"file_id": photo.file_id, "caption": ""})
    await message.answer("–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ \n–û—Ç–ø—Ä–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —ç—Ç–æ–º—É —Ñ–æ—Ç–æ", reply_markup=Keyboards.control_keyboard())
    await state.set_state(PhotoCarouselStates.awaiting_caption)

@router.message(PhotoCarouselStates.awaiting_caption, F.text)
async def caption_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏
    if user_photos.get(user_id):
        user_photos[user_id][-1]["caption"] = message.text
        await message.answer("–ü–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ \n–ú–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚è¨", reply_markup=Keyboards.control_keyboard())
        await state.set_state(PhotoCarouselStates.uploading_photos)
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.")

@router.message(PhotoCarouselStates.uploading_photos, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_uploading_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_photos.get(user_id):
        await message.answer("‚ö† –¢—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ ‚ö†")
        return

    await message.answer("–ö–∞—Ä—É—Å–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –≤ –≥—Ä—É–ø–ø—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await send_carousel_to_group(user_id, GROUP_ID)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—É—Å–µ–ª–∏
    await state.set_state(PhotoCarouselStates.browsing_photos)
    await state.update_data(current_index=0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ –∫–∞—Ä—É—Å–µ–ª–∏
async def send_carousel_to_group(user_id: int, group_id: int):
    if not user_photos.get(user_id):
        logger.warning(f"No photos found for user_id={user_id}")
        return

    # –ù–∞—á–∞–ª–æ —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
    initial_index = 0
    await show_photo_in_group(user_id, group_id, initial_index)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def show_photo_in_group(user_id: int, group_id: int, index: int):
    photo = user_photos[user_id][index]
    total_photos = len(user_photos[user_id])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    keyboard = Keyboards.carousel_keyboard(user_id, group_id, index)
    caption = f"{photo['caption']} \n–§–æ—Ç–æ {index + 1} –∏–∑ {total_photos}"

    try:
        await bot.send_photo(
            chat_id=group_id,
            photo=photo["file_id"],
            caption=caption,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Failed to send photo in group: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
@router.callback_query(F.data.startswith(("next_", "prev_")))
async def carousel_navigation(call: types.CallbackQuery):
    data = call.data.split("_")
    direction, user_id, group_id, current_index = data[0], int(data[1]), int(data[2]), int(data[3])

    if user_photos.get(user_id):
        total_photos = len(user_photos[user_id])
        new_index = (current_index + 1) % total_photos if direction == "next" else (current_index - 1) % total_photos
        photo = user_photos[user_id][new_index]
        keyboard = Keyboards.carousel_keyboard(user_id, group_id, new_index)
        caption = f"{photo['caption']} \n–§–æ—Ç–æ {new_index + 1} –∏–∑ {total_photos}"

        try:
            await call.message.edit_media(
                types.InputMediaPhoto(media=photo["file_id"], caption=caption),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Failed to edit media in group: {e}")

        await call.answer()
    else:
        logger.warning(f"Photos for user_id={user_id} are missing.")

# –í–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.include_router(router)

if __name__ == "__main__":
    import asyncio

    async def main():  
        logger.info("Carousel bot –∑–∞–ø—É—â–µ–Ω")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(main())
